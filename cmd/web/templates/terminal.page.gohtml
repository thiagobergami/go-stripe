{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
<h2 class="mt-3 text-center">Virtual Terminal </h2>
<hr>

<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form action="/payment-succeeded" method = "post"
    name="charge_form" id="charge_form"
    class="d-block needs-validation charge-form"
    autocomplete="off" novalidate="">

    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" class="form-control" id="amount" name="amount"
            required="" autocomplete="amount-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name"
            required="" autocomplete="caldholder-name-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Email</label>
        <input type="email" class="form-control" id="cardholder-email" name="cardholder_email"
            required="" autocomplete="caldholder-email-new">
    </div>

    <!-- card number will be bult by stripe -->
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role ="status">
            <span class="visually-hidden">Loading...</span>
    </div>
    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">
</form>
{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>
    <script>

    let card;
    let stripe;

    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");
    console.log({{.StripePublickKey}})
    stripe = Stripe({{.StripePublickKey}});

    const hidePayButton = () => {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none");
    }

    const showPayButtons = () => {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    const showCardError = (msg) => {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    const showCardSuccess = () => {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

    const val = () =>{
        const form = document.getElementById("charge_form");
        if(form.checkValidity() === false){
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }

        form.classList.add("was-validated");
        hidePayButton();

        const amountToCharge = String(parseFloat(document.getElementById("amount").value * 100))
        
        const payload = {
            amount: amountToCharge,
            currency: 'cad',
        }

        const requestOptions = {
            method: 'post',
            headers : {
                'Accept': 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(payload),
        }

        fetch("http://localhost:4001/api/payment-intent", requestOptions)
            .then(response => response.text())
            .then(response => {
                console.log(response)
                try {
                    const data = JSON.parse(response);
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method :{
                            card: card,
                            billing_details: {
                                name: document.getElementById("cardholder-name").value,
                            }
                        }
                    }).then((result)=>{
                        if (result.error){
                            // card declined, or something went wrong with the card
                            console.log(result)
                            shorCardError(result.error.message);
                            showPayButtons();
                        }
                        else if(result.paymentIntent) {
                            if(result.paymentIntent.status === "succeeded"){
                                //we have charged the card
                                document.getElementById("payment_method").value = result.paymentIntent.payment_method_types[0];
                                document.getElementById("payment_intent").value = result.paymentIntent.id;
                                document.getElementById("payment_amount").value = result.paymentIntent.amount;
                                document.getElementById("payment_currency").value = result.paymentIntent.currency;
                                processing.classList.add("d-none");

                                showCardSuccess();
                                //would submit the form
                            }
                        }
                    })
                }catch(err) {
                    console.log(err);
                    showCardError("Invalid response from payment gateway!");
                    showPayButtons();
                }
            })
    }
    ;(() => {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', (event) => {
            let displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        });
    })();
    </script>
{{end}}